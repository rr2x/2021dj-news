do not run

>>> py manage.py migrate

yet, we need to create our custom user model 1st.


>>> py manage.py makemigrations accounts
>>> py manage.py migrate

no need to add tests for core django functionality

SimpleTestCase = no database
TestCase = database involved

>>> pipenv install django-crispy-forms

NOTE: if on heroku, setup the variables manually which
      should reflect on your .env

can use auto forward for mailtrap.io to real inbox,
just buy plans to raise inbox limitations


>>> py manage.py makemigrations articles
>>> py manage.py migrate

authentication
 - login
 - logout
 - user registration
 - account password reset

authorization
 - restricted access based on user role

----- IMPORTANT NOTE missing imports: ----
change interpreter below (because we are using a different environment each time)
in this current project should read:
"Python 3.9.5 64-bit ('news-UdE2bFq2')"

>>> pipenv install environs[django]


to create a new secret:
>>> python
>>> import secrets
>>> print(secrets.token_urlsafe())
>>> exit()


>>> pipenv install psycopg2-binary
>>> pipenv install whitenoise
>>> py manage.py collectstatic

>>> pipenv install gunicorn   (install the production web server)

(heroku deployment)

>>> heroku login
>>> heroku create (custom name)

(check remotes)
>>> git remote -v
(if not included, add manually)
>>> git remote add Heroku ...

(create postgresql)
>>> heroku addons:create heroku-postgresql:hobby-dev
>>> heroku config:set SECRET_KEY='...'
>>> heroku config:set DISABLE_COLLECTSTATIC=1
>>> heroku config:set EMAIL_HOST='...'
>>> heroku config:set EMAIL_HOST_USER='...'
>>> heroku config:set EMAIL_HOST_PASSWORD='...'
>>> heroku config:set EMAIL_PORT='...'

---- commit to github 1st ---

>>> git push heroku master
>>> heroku run python manage.py migrate
>>> heroku run python manage.py createsuperuser
>>> heroku run python manage.py check --deploy